#include "PointHeat.h"

//constructor
PointHeat::PointHeat(float radius, float coreHeat) : m_radius{ radius }, m_coreHeat{ coreHeat } {}

//returns the heat generated by this emitter to the given iceblock
float PointHeat::getHeat(Iceblock* block)const {
	//gets the distance from the heat emitter to the iceblock
	if (hasOwner()) {
		if (reb::Container* containerOwner = dynamic_cast<reb::Container*>(getOwner())) {
			float distance = block->getBody()->getShape()->distanceFrom(
				block->getTransform()->getLocalSpace(
					containerOwner->getTransform()->getWorldSpace(m_offset)
				)
			);
			//returns zero if too far
			if (distance > m_radius) { return 0; }

			//returns heat value otherwise
			return std::powf(1.0f - std::powf(distance, 2) / std::powf(m_radius, 2), 2) * m_coreHeat;
		}
	}
	return 0;
}

//returns a clone of the heat emitter
PointHeat* PointHeat::clone()const {
	return new PointHeat(m_radius, m_coreHeat);
}