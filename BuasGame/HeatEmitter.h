#pragma once
#include <reb/OwnedObject.h>
#include "HeatHolder.h"
#include "Iceblock.h"

//defines how the heat generated by its owning object is calculated
class HeatEmitter : public reb::OwnedObject<HeatHolder> {
private:
	bool m_cold = false;
protected:
	//the offset of the emitter
	reb::Vector2 m_offset;

public:
	//returns the heat generated by this emitter to the given iceblock
	float getHeatAt(Iceblock* block)const { return getHeat(block) * (m_cold ? -1 : 1); };

	//gets the raw heat value
	virtual float getHeat(Iceblock* block)const = 0;

	//returns a copy of the heat emitter
	virtual HeatEmitter* clone()const = 0;

	//makes the emitter emit cold as opposed to heat
	void setCold() { m_cold = true; };

	//makes the emitter emit heat as opposed to cold
	void setHeat() { m_cold = false; };

	//returns true if the emitter emits cold
	bool emitsCold() { return m_cold; };

	//returns true if the emitter emits heat
	bool emitsHeat() { return !m_cold; };

	//returns the offset
	reb::Vector2 getOfsset() { return m_offset; };

	//sets the offset
	void setOfsset(reb::Vector2 newOfsset) { m_offset = newOfsset; };

	//removes the heat emitter from its owner
	void destroy()override {
		if (hasOwner()) {
			getOwner()->clearHeatEmitter();
		}
	}

};